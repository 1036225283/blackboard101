Pcurve = 2**256 - 2**32 - 2**9 - 2**8 - 2**7 - 2**6 - 2**4 -1
Acurve = 0; Bcurve = 7
Gx = 55066263022277343669578718895168534326250603453777594175500187360389116729240
Gy = 32670510020758816978083085130507043184471273380659243275938904335757337482424
GPoint = (Gx,Gy)

code_string = '0123456789abcdef' #convert hex to decimal
privkey = 0

priv = '72d58560fad5975e4d7dc2fe2d2bf3baf93e2970dae1a1ea14fdec1d0da70c16' #replace with any private key
print "Your private key is", priv; print


def modinv(a,n=Pcurve): #Extended Euclidean Algorithm is 'division' in the world of elliptic curves
    lm, hm = 1,0
    low, high = a%Pcurve,Pcurve
    while low > 1:
        ratio = high/low
        nm, new = hm-lm*ratio, high-low*ratio
        lm, low, hm, high = nm, new, lm, low
    return lm % n

def base10_add(a,b):
    m = ((b[1]-a[1]) * modinv(b[0]-a[0],Pcurve)) % Pcurve
    x = (m*m-a[0]-b[0]) % Pcurve
    y = (m*(a[0]-x)-a[1]) % Pcurve
    return (x,y)

def base10_double(a):
    LamDenom = 2*a[1]
    LamNumer = 3*a[0]*a[0]+Acurve
    Lam = (LamNumer * modinv(LamDenom,Pcurve)) % Pcurve
    x = (Lam*Lam-2*a[0]) % Pcurve
    y = (Lam*(a[0]-x)-a[1]) % Pcurve
    return (x,y)

while len(priv) > 0:
    privkey *= 16
    privkey += code_string.find(priv[0])
    priv = priv[1:]
binpriv = str(bin(privkey))[2:]
Q=GPoint
j=1
for i in range (len(binpriv), 1, -1):
    Q=base10_double(Q)
    if binpriv[j:j+1] == "1":
        Q=base10_add(Q,GPoint)
    j += 1
print "Using no libs, SHA256 or special functions, your uncompressed public key (not address) is"; print; print Q
